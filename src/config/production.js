// üìÅ /src/config/production.js
export const PRODUCTION_CONFIG = {
  // CONFIGURA√á√ïES DE VIDEOCHAMADA PARA PRODU√á√ÉO
  webrtc: {
    // Timeout agressivo para falha r√°pida
    connectionTimeout: 15000, // 15 segundos
    
    // M√°ximo de tentativas de reconex√£o
    maxReconnectAttempts: 2,
    
    // Configura√ß√µes de m√≠dia otimizadas para estabilidade
    mediaConstraints: {
      video: {
        width: { ideal: 640, max: 1280 },    // Resolu√ß√£o menor = mais est√°vel
        height: { ideal: 480, max: 720 },
        frameRate: { ideal: 15, max: 30 },   // FPS menor = menos banda
        facingMode: 'user'
      },
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true,
        sampleRate: 44100
      }
    },
    
    // Servidores TURN/STUN enterprise
    iceServers: [
      // STUN servers (gratuitos, backup)
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' },
      
      // TURN servers p√∫blicos (garantem conectividade)
      { 
        urls: 'turn:openrelay.metered.ca:80',
        username: 'openrelayproject',
        credential: 'openrelayproject'
      },
      { 
        urls: 'turn:openrelay.metered.ca:443',
        username: 'openrelayproject', 
        credential: 'openrelayproject'
      },
      { 
        urls: 'turn:openrelay.metered.ca:443?transport=tcp',
        username: 'openrelayproject',
        credential: 'openrelayproject'
      },
      
      // TURN adicional para m√°xima confiabilidade
      {
        urls: 'turn:relay.backups.cz',
        username: 'webrtc',
        credential: 'webrtc'
      }
    ],
    
    // Configura√ß√µes de peer otimizadas
    peerConfig: {
      iceCandidatePoolSize: 10,
      bundlePolicy: 'max-bundle',
      rtcpMuxPolicy: 'require',
      iceTransportPolicy: 'all'
    }
  },
  
  // MONITORAMENTO E ALERTAS
  monitoring: {
    // Log de problemas para an√°lise
    enableErrorLogging: true,
    
    // Estat√≠sticas de conex√£o
    enableStats: true,
    
    // Alertas autom√°ticos
    enableAlerts: true,
    
    // M√©tricas cr√≠ticas
    criticalMetrics: {
      connectionFailureRate: 0.05, // M√°ximo 5% de falhas
      averageConnectionTime: 10000, // M√°ximo 10s para conectar
      reconnectionSuccess: 0.80     // M√≠nimo 80% de sucesso na reconex√£o
    }
  },
  
  // MENSAGENS PARA O USU√ÅRIO
  messages: {
    errors: {
      connectionTimeout: 'A conex√£o est√° demorando mais que o normal. Isso pode ser devido √† sua conex√£o de internet ou firewall.',
      permissionDenied: 'Precisamos de acesso √† sua c√¢mera e microfone. Clique no √≠cone de cadeado na barra de endere√ßo e permita o acesso.',
      deviceNotFound: 'C√¢mera ou microfone n√£o encontrados. Verifique se est√£o conectados e funcionando.',
      networkError: 'Problema de conectividade detectado. Verifique sua conex√£o com a internet.',
      browserNotSupported: 'Seu navegador n√£o suporta videochamadas. Use Chrome, Firefox ou Safari atualizado.',
      maxReconnectReached: 'N√£o foi poss√≠vel estabelecer uma conex√£o est√°vel. Entre em contato com o suporte t√©cnico.'
    },
    
    success: {
      connected: 'Conectado com sucesso!',
      mediaInitialized: 'C√¢mera e microfone configurados',
      reconnected: 'Reconex√£o bem-sucedida'
    },
    
    progress: {
      testing: 'Verificando sistema...',
      initializingMedia: 'Inicializando c√¢mera e microfone...',
      connecting: 'Estabelecendo conex√£o...',
      exchangingSignals: 'Trocando informa√ß√µes de conex√£o...',
      finalizing: 'Finalizando conex√£o...'
    }
  },
  
  // CONFIGURA√á√ïES ESPEC√çFICAS POR TIPO DE USU√ÅRIO
  userTypes: {
    medico: {
      // M√©dicos precisam de conex√£o mais est√°vel
      priority: 'high',
      requiresStableConnection: true,
      
      // Configura√ß√µes mais rigorosas
      mediaConstraints: {
        video: {
          width: { ideal: 1280, max: 1920 },
          height: { ideal: 720, max: 1080 },
          frameRate: { ideal: 30, max: 60 }
        }
      },
      
      // Timeout menor para m√©dicos
      connectionTimeout: 10000
    },
    
    paciente: {
      // Pacientes podem ter conex√µes variadas
      priority: 'normal',
      requiresStableConnection: false,
      
      // Configura√ß√µes mais flex√≠veis
      mediaConstraints: {
        video: {
          width: { ideal: 640, max: 1280 },
          height: { ideal: 480, max: 720 },
          frameRate: { ideal: 15, max: 30 }
        }
      },
      
      // Timeout mais tolerante
      connectionTimeout: 20000
    }
  },
  
  // FALLBACKS E CONTING√äNCIAS
  fallbacks: {
    // Se WebRTC falhar, op√ß√µes alternativas
    enableAudioOnly: true,        // Permitir chamada s√≥ de √°udio
    enableLowQuality: true,       // Reduzir qualidade automaticamente
    enableReconnection: true,     // Reconex√£o autom√°tica
    
    // Mensagens para situa√ß√µes de fallback
    messages: {
      audioOnly: 'Problema com v√≠deo. Continuando com √°udio apenas.',
      lowQuality: 'Reduzindo qualidade para melhorar estabilidade.',
      reconnecting: 'Problema de conex√£o. Tentando reconectar...'
    }
  },
  
  // SUPORTE T√âCNICO
  support: {
    // Informa√ß√µes de contato para problemas cr√≠ticos
    email: 'suporte@teleatendimento.com',
    phone: '0800-123-4567',
    whatsapp: '5511999999999',
    
    // Links √∫teis
    troubleshootingGuide: '/ajuda/problemas-video',
    systemRequirements: '/ajuda/requisitos',
    
    // Hor√°rio de atendimento
    hours: '24/7 para emerg√™ncias m√©dicas',
    
    // Escala√ß√£o autom√°tica
    autoEscalation: {
      enabled: true,
      afterFailures: 3,
      criticalUserTypes: ['medico'] // M√©dicos t√™m prioridade
    }
  },
  
  // ANALYTICS E M√âTRICAS
  analytics: {
    // Eventos importantes para tracking
    events: {
      connectionStart: 'video_call_start',
      connectionSuccess: 'video_call_connected',
      connectionFailure: 'video_call_failed',
      reconnectionAttempt: 'video_call_reconnect',
      callEnd: 'video_call_end'
    },
    
    // Propriedades para an√°lise
    properties: {
      userType: true,
      connectionTime: true,
      failureReason: true,
      networkType: true,
      deviceType: true,
      browserVersion: true
    }
  },
  
  // AMBIENTE DE PRODU√á√ÉO
  environment: {
    // URLs dos servi√ßos
    websocketUrl: process.env.REACT_APP_WS_URL || 'wss://api.teleatendimento.com/ws',
    apiUrl: process.env.REACT_APP_API_URL || 'https://api.teleatendimento.com',
    
    // Configura√ß√µes de seguran√ßa
    enableLogging: process.env.NODE_ENV !== 'production',
    enableDebug: false,
    
    // Feature flags
    features: {
      screenSharing: false,      // N√£o implementado ainda
      recording: false,          // N√£o implementado ainda
      chatDuringCall: false,     // N√£o implementado ainda
      multipleParticipants: false // Sempre 1:1
    }
  }
}

// Fun√ß√£o para obter configura√ß√£o baseada no tipo de usu√°rio
export const getConfigForUser = (userType) => {
  const baseConfig = PRODUCTION_CONFIG.webrtc
  const userConfig = PRODUCTION_CONFIG.userTypes[userType] || PRODUCTION_CONFIG.userTypes.paciente
  
  return {
    ...baseConfig,
    ...userConfig,
    mediaConstraints: {
      ...baseConfig.mediaConstraints,
      ...userConfig.mediaConstraints
    }
  }
}

// Fun√ß√£o para obter mensagem de erro amig√°vel
export const getErrorMessage = (errorCode, context = {}) => {
  const messages = PRODUCTION_CONFIG.messages.errors
  
  // Mapeamento de c√≥digos para mensagens
  const errorMap = {
    'NotAllowedError': messages.permissionDenied,
    'NotFoundError': messages.deviceNotFound,
    'NotSupportedError': messages.browserNotSupported,
    'timeout': messages.connectionTimeout,
    'network': messages.networkError,
    'maxReconnect': messages.maxReconnectReached
  }
  
  return errorMap[errorCode] || `Erro t√©cnico: ${errorCode}`
}

// Valida√ß√£o de ambiente para produ√ß√£o
export const validateProductionEnvironment = () => {
  const issues = []
  
  // Verificar HTTPS em produ√ß√£o
  if (process.env.NODE_ENV === 'production' && window.location.protocol !== 'https:') {
    issues.push('HTTPS √© obrigat√≥rio em produ√ß√£o para WebRTC')
  }
  
  // Verificar vari√°veis de ambiente
  if (!process.env.REACT_APP_WS_URL) {
    issues.push('REACT_APP_WS_URL n√£o configurado')
  }
  
  // Verificar suporte do navegador
  if (!navigator.mediaDevices || !window.RTCPeerConnection) {
    issues.push('Navegador n√£o suporta WebRTC')
  }
  
  return {
    valid: issues.length === 0,
    issues
  }
}
